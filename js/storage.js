// ============================================
// EMOTIQUEST - STORAGE.JS (VERSI√ìN CORREGIDA)
// Sistema de almacenamiento 100% funcional
// ============================================

// ==================== CLAVES DE LOCALSTORAGE ====================
const STORAGE_KEYS = {
  SESIONES: 'emotiquest_sesiones',
  SESION_ACTUAL: 'emotiquest_sesion_actual',
  USUARIO_ACTUAL: 'emotiquest_usuario_actual'
};

// ==================== FUNCIONES DE SESI√ìN ACTUAL ====================

/**
 * Guarda la sesi√≥n en progreso
 */
function guardarSesionActual(sesion) {
  try {
    localStorage.setItem(STORAGE_KEYS.SESION_ACTUAL, JSON.stringify(sesion));
    console.log('‚úÖ Sesi√≥n actual guardada:', sesion.id);
    return true;
  } catch (error) {
    console.error('‚ùå Error al guardar sesi√≥n actual:', error);
    return false;
  }
}

/**
 * Obtiene la sesi√≥n en progreso
 */
function obtenerSesionActual() {
  try {
    const data = localStorage.getItem(STORAGE_KEYS.SESION_ACTUAL);
    return data ? JSON.parse(data) : null;
  } catch (error) {
    console.error('‚ùå Error al obtener sesi√≥n actual:', error);
    return null;
  }
}

/**
 * Limpia la sesi√≥n actual
 */
function limpiarSesionActual() {
  try {
    localStorage.removeItem(STORAGE_KEYS.SESION_ACTUAL);
    console.log('üßπ Sesi√≥n actual limpiada');
    return true;
  } catch (error) {
    console.error('‚ùå Error al limpiar sesi√≥n:', error);
    return false;
  }
}

// ==================== FUNCIONES DE USUARIO ====================

/**
 * Guarda el usuario actual
 */
function guardarUsuarioActual(usuario) {
  try {
    localStorage.setItem(STORAGE_KEYS.USUARIO_ACTUAL, JSON.stringify(usuario));
    console.log('‚úÖ Usuario guardado:', usuario.id);
    return true;
  } catch (error) {
    console.error('‚ùå Error al guardar usuario:', error);
    return false;
  }
}

/**
 * Obtiene el usuario actual
 */
function obtenerUsuarioActual() {
  try {
    const data = localStorage.getItem(STORAGE_KEYS.USUARIO_ACTUAL);
    return data ? JSON.parse(data) : null;
  } catch (error) {
    console.error('‚ùå Error al obtener usuario:', error);
    return null;
  }
}

/**
 * Limpia el usuario actual
 */
function limpiarUsuarioActual() {
  try {
    localStorage.removeItem(STORAGE_KEYS.USUARIO_ACTUAL);
    console.log('üßπ Usuario limpiado');
    return true;
  } catch (error) {
    console.error('‚ùå Error al limpiar usuario:', error);
    return false;
  }
}

// ==================== FUNCIONES DE SESIONES GUARDADAS ====================

/**
 * Obtiene todas las sesiones guardadas
 */
function obtenerTodasLasSesiones() {
  try {
    const data = localStorage.getItem(STORAGE_KEYS.SESIONES);
    const sesiones = data ? JSON.parse(data) : [];
    console.log(`üìä ${sesiones.length} sesiones cargadas`);
    return sesiones;
  } catch (error) {
    console.error('‚ùå Error al obtener sesiones:', error);
    return [];
  }
}

/**
 * Guarda una sesi√≥n completada en el historial
 */
function guardarSesionCompletada(sesion) {
  try {
    // Validar que la sesi√≥n tenga datos m√≠nimos
    if (!sesion.id || !sesion.emocionPredominante) {
      console.error('‚ùå Sesi√≥n incompleta:', sesion);
      return false;
    }

    // Obtener sesiones existentes
    const sesiones = obtenerTodasLasSesiones();
    
    // Verificar si ya existe
    const indice = sesiones.findIndex(s => s.id === sesion.id);
    
    if (indice !== -1) {
      // Actualizar sesi√≥n existente
      sesiones[indice] = sesion;
      console.log('üîÑ Sesi√≥n actualizada:', sesion.id);
    } else {
      // Agregar nueva sesi√≥n
      sesiones.push(sesion);
      console.log('‚ûï Nueva sesi√≥n agregada:', sesion.id);
    }
    
    // Guardar en localStorage
    localStorage.setItem(STORAGE_KEYS.SESIONES, JSON.stringify(sesiones));
    
    console.log(`‚úÖ SESI√ìN GUARDADA EXITOSAMENTE`);
    console.log(`üìä Total de sesiones: ${sesiones.length}`);
    console.log(`üéØ Emoci√≥n: ${sesion.emocionPredominante}`);
    
    return true;
  } catch (error) {
    console.error('‚ùå ERROR CR√çTICO al guardar sesi√≥n:', error);
    return false;
  }
}

/**
 * Elimina una sesi√≥n espec√≠fica
 */
function eliminarSesion(idSesion) {
  try {
    const sesiones = obtenerTodasLasSesiones();
    const filtradas = sesiones.filter(s => s.id !== idSesion);
    
    if (sesiones.length === filtradas.length) {
      console.log('‚ö†Ô∏è Sesi√≥n no encontrada:', idSesion);
      return false;
    }
    
    localStorage.setItem(STORAGE_KEYS.SESIONES, JSON.stringify(filtradas));
    console.log('üóëÔ∏è Sesi√≥n eliminada:', idSesion);
    return true;
  } catch (error) {
    console.error('‚ùå Error al eliminar sesi√≥n:', error);
    return false;
  }
}

/**
 * Limpia TODAS las sesiones (con confirmaci√≥n)
 */
function limpiarTodasLasSesiones() {
  try {
    const confirmacion = confirm(
      '‚ö†Ô∏è ¬øEliminar TODAS las sesiones?\n\n' +
      'Esta acci√≥n NO se puede deshacer.'
    );
    
    if (!confirmacion) {
      return false;
    }
    
    localStorage.removeItem(STORAGE_KEYS.SESIONES);
    console.log('üóëÔ∏è Todas las sesiones eliminadas');
    return true;
  } catch (error) {
    console.error('‚ùå Error al limpiar sesiones:', error);
    return false;
  }
}

// ==================== FUNCIONES DE EMOTIQUEST (COMPATIBILIDAD) ====================

/**
 * Sistema EmotiQuestStorage como objeto global
 * Para compatibilidad con c√≥digo que usa window.EmotiQuestStorage
 */
window.EmotiQuestStorage = {
  // Sesi√≥n actual
  guardarSesionActual: guardarSesionActual,
  obtenerSesionActual: obtenerSesionActual,
  limpiarSesionActual: limpiarSesionActual,
  
  // Usuario
  guardarUsuarioActual: guardarUsuarioActual,
  obtenerUsuarioActual: obtenerUsuarioActual,
  limpiarUsuarioActual: limpiarUsuarioActual,
  
  // Sesiones guardadas
  obtenerHistorial: obtenerTodasLasSesiones, // Alias
  guardarEnHistorial: guardarSesionCompletada, // Alias
  obtenerTodasLasSesiones: obtenerTodasLasSesiones,
  guardarSesionCompletada: guardarSesionCompletada,
  eliminarSesion: eliminarSesion,
  limpiarHistorial: limpiarTodasLasSesiones,
  
  // Respuestas (para compatibilidad)
  guardarRespuestas: function(respuestas) {
    const sesion = obtenerSesionActual();
    if (sesion) {
      sesion.respuestas = respuestas;
      return guardarSesionActual(sesion);
    }
    return false;
  },
  
  obtenerRespuestas: function() {
    const sesion = obtenerSesionActual();
    return sesion ? (sesion.respuestas || []) : [];
  },
  
  limpiarRespuestas: function() {
    const sesion = obtenerSesionActual();
    if (sesion) {
      sesion.respuestas = [];
      return guardarSesionActual(sesion);
    }
    return false;
  }
};

// ==================== VERIFICACI√ìN INICIAL ====================
console.log('‚úÖ storage.js cargado correctamente');
console.log('üìä Sesiones guardadas:', obtenerTodasLasSesiones().length);

// Verificar si hay sesi√≥n activa
const sesionActiva = obtenerSesionActual();
if (sesionActiva) {
  console.log('‚ö†Ô∏è Hay una sesi√≥n activa:', sesionActiva.id);
}